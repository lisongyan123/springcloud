server:
  port: 18082

spring:

  # 设置使用哪个环境的配置
  # 默认的profile为dev，其他环境通过指定启动参数使用不同的profile，比如：
  #   测试环境：java -jar bootshiro.jar --spring.profiles.active=test
  #   生产环境：java -jar bootshiro.jar --spring.profiles.active=prod
  profiles:
    active: dev

  application:
    name: cloud-service

  datasource:
    #      url: jdbc:mysql://localhost:12345/usthe?useUnicode=true&characterEncoding=utf-8&useSSL=false
    #      username: root
    #      password: admin
    driver-class-name: com.mysql.jdbc.Driver
    platform: mysql
    type: com.alibaba.druid.pool.DruidDataSource
    # 下面为连接池的补充设置，应用到上面所有数据源中
    # 初始化大小，最小，最大
    # druid 配置: https://github.com/alibaba/druid/wiki/
    initialSize: 1
    minIdle: 1
    maxActive: 20
    # 配置获取连接等待超时的时间
    maxWait: 60000
    # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
    timeBetweenEvictionRunsMillis: 60000
    # 配置一个连接在池中最小生存的时间，单位是毫秒
    minEvictableIdleTimeMillis: 300000
    validationQuery: select 1
    testWhileIdle: true
    testOnBorrow: false
    testOnReturn: false
    # 打开PSCache，并且指定每个连接上PSCache的大小
    poolPreparedStatements: true
    maxPoolPreparedStatementPerConnectionSize: 20
    # 配置监控统计拦截的filters，stat用于监控界面，'wall'用于防火墙防御sql注入, slf4j用于druid记录sql日志
    filters: stat,slf4j,wall
    # 通过connectProperties属性来打开mergeSql功能；慢SQL记录
    connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
    # 合并多个DruidDataSource的监控数据
    useGlobalDataSourceStat: false
#  datasource:
#    driver-class-name: com.mysql.cj.jdbc.Driver
#    url: jdbc:mysql://127.0.0.1:3306/lsy?characterEncoding=utf8&useSSL=false&serverTimezone=UTC&rewriteBatchedStatements=true&allowPublicKeyRetrieval=true
#    username: root
#    password: 123456
#    platform: mysql
#    type: com.alibaba.druid.pool.DruidDataSource

  cloud:
    consul:
      host: localhost
      port: 8500
      discovery:
        prefer-ip-address: true
        enabled: true
        register: true
        hostname: 127.0.0.1
        serviceName: ${spring.application.name}
        tags: test
        instanceId: ${spring.application.name}-${spring.cloud.client.ip-address}-${server.port}
        health-check-path: /actuator/health
        healthCheckInterval: 15s

jasypt:
  encryptor:
    password: e!swhdg&d763jo

bootshiro:
  enableEncryptPassword: true

---
# 开发环境配置(配置项只包括环境不同项)
spring:
  profiles: dev
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://127.0.0.1:3306/usthe?characterEncoding=utf8&useSSL=false&serverTimezone=UTC&rewriteBatchedStatements=true&allowPublicKeyRetrieval=true
    username: root
    password: 123456
    platform: mysql
    type: com.alibaba.druid.pool.DruidDataSource
---
# 测试环境配置(配置项只包括不同项)

spring:
  profiles: test
  datasource:
    url: jdbc:mysql://127.0.0.1:3306/usthe?useUnicode=true&characterEncoding=utf-8&useSSL=false
    username: root
    password: ENC(X118nhUgaLMJ7niJyBao5E35QYgQaq3o)
  redis:
    # 服务器IP地址
    host: 127.0.0.1
    # 连接端口
    port: 6368
    # Redis服务器连接密码（默认为空）
    password:

---
# 生产环境配置(配置项只包括不同项)

spring:
  profiles: prod
  datasource:
    url: jdbc:mysql://172.16.215.193:3306/usthe?useUnicode=true&characterEncoding=utf-8&useSSL=false
    username: root
    password: ENC(vp7cbF0sE/lRsThrcwdiA/WoeG1mIXzy)
  redis:
    # 服务器IP地址
    host: 172.16.215.193
    # 连接端口
    port: 6368
    # Redis服务器连接密码（默认为空）
    password: